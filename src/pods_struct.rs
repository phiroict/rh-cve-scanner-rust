use serde_derive::Deserialize;
use serde_derive::Serialize;
use serde_json::Value;

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Root {
    pub api_version: String,
    pub items: Vec<Item>,
    pub kind: String,
    pub metadata: Metadata2,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Item {
    pub api_version: String,
    pub kind: String,
    pub metadata: Metadata,
    pub spec: Spec,
    pub status: Status,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Metadata {
    pub annotations: Option<Annotations>,
    pub creation_timestamp: String,
    pub generate_name: Option<String>,
    pub labels: Labels,
    pub name: String,
    pub namespace: String,
    pub owner_references: Vec<OwnerReference>,
    pub resource_version: String,
    pub uid: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Annotations {
    #[serde(rename = "k8s.v1.cni.cncf.io/network-status")]
    pub k8s_v1_cni_cncf_io_network_status: Option<String>,
    #[serde(rename = "k8s.v1.cni.cncf.io/networks-status")]
    pub k8s_v1_cni_cncf_io_networks_status: Option<String>,
    #[serde(rename = "openshift.io/scc")]
    pub openshift_io_scc: Option<String>,
    #[serde(rename = "seccomp.security.alpha.kubernetes.io/pod")]
    pub seccomp_security_alpha_kubernetes_io_pod: Option<String>,
    #[serde(rename = "configmaps/client-ca")]
    pub configmaps_client_ca: Option<String>,
    #[serde(rename = "configmaps/config")]
    pub configmaps_config: Option<String>,
    #[serde(rename = "openshiftcontrollermanagers.operator.openshift.io/cluster")]
    pub openshiftcontrollermanagers_operator_openshift_io_cluster: Option<String>,
    #[serde(rename = "alm-examples")]
    pub alm_examples: Option<String>,
    pub capabilities: Option<String>,
    pub categories: Option<String>,
    pub certified: Option<String>,
    pub container_image: Option<String>,
    pub created_at: Option<String>,
    pub description: Option<String>,
    #[serde(rename = "kubectl.kubernetes.io/default-container")]
    pub kubectl_kubernetes_io_default_container: Option<String>,
    #[serde(rename = "olm.operatorGroup")]
    pub olm_operator_group: Option<String>,
    #[serde(rename = "olm.operatorNamespace")]
    pub olm_operator_namespace: Option<String>,
    #[serde(rename = "olm.skipRange")]
    pub olm_skip_range: Option<String>,
    #[serde(rename = "olm.targetNamespaces")]
    pub olm_target_namespaces: Option<String>,
    #[serde(rename = "operatorframework.io/cluster-monitoring")]
    pub operatorframework_io_cluster_monitoring: Option<String>,
    #[serde(rename = "operatorframework.io/properties")]
    pub operatorframework_io_properties: Option<String>,
    #[serde(rename = "operatorframework.io/suggested-namespace")]
    pub operatorframework_io_suggested_namespace: Option<String>,
    #[serde(rename = "operators.openshift.io/infrastructure-features")]
    pub operators_openshift_io_infrastructure_features: Option<String>,
    #[serde(rename = "operators.openshift.io/valid-subscription")]
    pub operators_openshift_io_valid_subscription: Option<String>,
    #[serde(rename = "operators.operatorframework.io/builder")]
    pub operators_operatorframework_io_builder: Option<String>,
    #[serde(rename = "operators.operatorframework.io/project_layout")]
    pub operators_operatorframework_io_project_layout: Option<String>,
    pub support: Option<String>,
    #[serde(rename = "include.release.openshift.io/ibm-cloud-managed")]
    pub include_release_openshift_io_ibm_cloud_managed: Option<String>,
    #[serde(rename = "include.release.openshift.io/self-managed-high-availability")]
    pub include_release_openshift_io_self_managed_high_availability: Option<String>,
    pub olmcahash: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-oauth-apiserver.etcd-client.secret")]
    pub operator_openshift_io_dep_openshift_oauth_apiserver_etcd_client_secret: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-oauth-apiserver.etcd-serving-ca.configmap")]
    pub operator_openshift_io_dep_openshift_oauth_apiserver_etcd_serving_ca_configmap: Option<String>,
    #[serde(rename = "cluster-autoscaler.kubernetes.io/safe-to-evict")]
    pub cluster_autoscaler_kubernetes_io_safe_to_evict: Option<String>,
    #[serde(rename = "operatorframework.io/managed-by")]
    pub operatorframework_io_managed_by: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-machine-api.mao-trusted-ca.configmap")]
    pub operator_openshift_io_dep_openshift_machine_api_mao_trusted_ca_configmap: Option<String>,
    #[serde(rename = "logging.openshift.io/hash")]
    pub logging_openshift_io_hash: Option<String>,
    #[serde(rename = "logging.openshift.io/kibana")]
    pub logging_openshift_io_kibana: Option<String>,
    #[serde(rename = "logging.openshift.io/kibana-proxy")]
    pub logging_openshift_io_kibana_proxy: Option<String>,
    #[serde(rename = "scheduler.alpha.kubernetes.io/critical-pod")]
    pub scheduler_alpha_kubernetes_io_critical_pod: Option<String>,
    #[serde(rename = "console.openshift.io/plugins")]
    pub console_openshift_io_plugins: Option<String>,
    #[serde(rename = "kubernetes.io/config.hash")]
    pub kubernetes_io_config_hash: Option<String>,
    #[serde(rename = "kubernetes.io/config.mirror")]
    pub kubernetes_io_config_mirror: Option<String>,
    #[serde(rename = "kubernetes.io/config.seen")]
    pub kubernetes_io_config_seen: Option<String>,
    #[serde(rename = "kubernetes.io/config.source")]
    pub kubernetes_io_config_source: Option<String>,
    #[serde(rename = "target.workload.openshift.io/management")]
    pub target_workload_openshift_io_management: Option<String>,
    #[serde(rename = "unsupported.do-not-use.openshift.io/override-liveness-grace-period-seconds")]
    pub unsupported_do_not_use_openshift_io_override_liveness_grace_period_seconds: Option<String>,
    #[serde(rename = "imageregistry.operator.openshift.io/dependencies-checksum")]
    pub imageregistry_operator_openshift_io_dependencies_checksum: Option<String>,
    #[serde(rename = "cluster-autoscaler.kubernetes.io/enable-ds-eviction")]
    pub cluster_autoscaler_kubernetes_io_enable_ds_eviction: Option<String>,
    #[serde(rename = "configmaps/openshift-global-ca")]
    pub configmaps_openshift_global_ca: Option<String>,
    #[serde(rename = "configmaps/openshift-service-ca")]
    pub configmaps_openshift_service_ca: Option<String>,
    #[serde(rename = "console.openshift.io/console-config-version")]
    pub console_openshift_io_console_config_version: Option<String>,
    #[serde(rename = "console.openshift.io/image")]
    pub console_openshift_io_image: Option<String>,
    #[serde(rename = "console.openshift.io/infrastructure-config-version")]
    pub console_openshift_io_infrastructure_config_version: Option<String>,
    #[serde(rename = "console.openshift.io/oauth-secret-version")]
    pub console_openshift_io_oauth_secret_version: Option<String>,
    #[serde(rename = "console.openshift.io/oauth-serving-cert-config-version")]
    pub console_openshift_io_oauth_serving_cert_config_version: Option<String>,
    #[serde(rename = "console.openshift.io/proxy-config-version")]
    pub console_openshift_io_proxy_config_version: Option<String>,
    #[serde(rename = "console.openshift.io/service-ca-config-version")]
    pub console_openshift_io_service_ca_config_version: Option<String>,
    #[serde(rename = "console.openshift.io/trusted-ca-config-version")]
    pub console_openshift_io_trusted_ca_config_version: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-desired.generation")]
    pub operator_openshift_io_dep_desired_generation: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-apiserver.config.configmap")]
    pub operator_openshift_io_dep_openshift_apiserver_config_configmap: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-apiserver.etcd-client.secret")]
    pub operator_openshift_io_dep_openshift_apiserver_etcd_client_secret: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-apiserver.etcd-serving-ca.configmap")]
    pub operator_openshift_io_dep_openshift_apiserver_etcd_serving_ca_configmap: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-apiserver.image-import-ca.configmap")]
    pub operator_openshift_io_dep_openshift_apiserver_image_import_ca_configmap: Option<String>,
    #[serde(rename = "operator.openshift.io/dep-openshift-apiserver.trusted-ca-bundle.configmap")]
    pub operator_openshift_io_dep_openshift_apiserver_trusted_ca_bundle_configmap: Option<String>,
    #[serde(rename = "operator.openshift.io/rvs-hash")]
    pub operator_openshift_io_rvs_hash: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Labels {
    pub app: Option<String>,
    #[serde(rename = "pod-template-hash")]
    pub pod_template_hash: Option<String>,
    #[serde(rename = "app.kubernetes.io/component")]
    pub app_kubernetes_io_component: Option<String>,
    #[serde(rename = "app.kubernetes.io/instance")]
    pub app_kubernetes_io_instance: Option<String>,
    #[serde(rename = "app.kubernetes.io/name")]
    pub app_kubernetes_io_name: Option<String>,
    #[serde(rename = "app.kubernetes.io/part-of")]
    pub app_kubernetes_io_part_of: Option<String>,
    #[serde(rename = "controller-revision-hash")]
    pub controller_revision_hash: Option<String>,
    #[serde(rename = "pod-template-generation")]
    pub pod_template_generation: Option<String>,
    pub apiserver: Option<String>,
    #[serde(rename = "openshift-apiserver-anti-affinity")]
    pub openshift_apiserver_anti_affinity: Option<String>,
    pub revision: Option<String>,
    #[serde(rename = "oauth-openshift-anti-affinity")]
    pub oauth_openshift_anti_affinity: Option<String>,
    pub name: Option<String>,
    #[serde(rename = "openshift-app")]
    pub openshift_app: Option<String>,
    #[serde(rename = "k8s-app")]
    pub k8s_app: Option<String>,
    pub component: Option<String>,
    #[serde(rename = "controller-manager")]
    pub controller_manager: Option<String>,
    #[serde(rename = "openshift-route-controller-manager-anti-affinity")]
    pub openshift_route_controller_manager_anti_affinity: Option<String>,
    #[serde(rename = "dns.operator.openshift.io/daemonset-dns")]
    pub dns_operator_openshift_io_daemonset_dns: Option<String>,
    #[serde(rename = "dns.operator.openshift.io/daemonset-node-resolver")]
    pub dns_operator_openshift_io_daemonset_node_resolver: Option<String>,
    pub etcd: Option<String>,
    #[serde(rename = "controller-uid")]
    pub controller_uid: Option<String>,
    #[serde(rename = "job-name")]
    pub job_name: Option<String>,
    #[serde(rename = "docker-registry")]
    pub docker_registry: Option<String>,
    #[serde(rename = "ingresscanary.operator.openshift.io/daemonset-ingresscanary")]
    pub ingresscanary_operator_openshift_io_daemonset_ingresscanary: Option<String>,
    #[serde(rename = "ingresscontroller.operator.openshift.io/deployment-ingresscontroller")]
    pub ingresscontroller_operator_openshift_io_deployment_ingresscontroller: Option<String>,
    #[serde(rename = "ingresscontroller.operator.openshift.io/hash")]
    pub ingresscontroller_operator_openshift_io_hash: Option<String>,
    #[serde(rename = "kube-controller-manager")]
    pub kube_controller_manager: Option<String>,
    pub scheduler: Option<String>,
    #[serde(rename = "logging-infra")]
    pub logging_infra: Option<String>,
    pub provider: Option<String>,
    #[serde(rename = "cluster-name")]
    pub cluster_name: Option<String>,
    #[serde(rename = "es-node-client")]
    pub es_node_client: Option<String>,
    #[serde(rename = "es-node-data")]
    pub es_node_data: Option<String>,
    #[serde(rename = "es-node-master")]
    pub es_node_master: Option<String>,
    #[serde(rename = "node-name")]
    pub node_name: Option<String>,
    pub api: Option<String>,
    #[serde(rename = "catalogsource.operators.coreos.com/update")]
    pub catalogsource_operators_coreos_com_update: Option<String>,
    #[serde(rename = "olm.catalogSource")]
    pub olm_catalog_source: Option<String>,
    #[serde(rename = "olm.pod-spec-hash")]
    pub olm_pod_spec_hash: Option<String>,
    #[serde(rename = "openshift.io/component")]
    pub openshift_io_component: Option<String>,
    #[serde(rename = "type")]
    pub type_field: Option<String>,
    pub namespace: Option<String>,
    #[serde(rename = "kubernetes.io/os")]
    pub kubernetes_io_os: Option<String>,
    #[serde(rename = "oauth-apiserver-anti-affinity")]
    pub oauth_apiserver_anti_affinity: Option<String>,
    #[serde(rename = "route-controller-manager")]
    pub route_controller_manager: Option<String>,
    #[serde(rename = "service-ca")]
    pub service_ca: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct OwnerReference {
    pub api_version: String,
    pub block_owner_deletion: Option<bool>,
    pub controller: Option<bool>,
    pub kind: String,
    pub name: String,
    pub uid: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Spec {
    pub containers: Vec<Container>,
    pub dns_policy: String,
    pub enable_service_links: bool,
    #[serde(default)]
    pub image_pull_secrets: Vec<ImagePullSecret>,
    pub node_name: Option<String>,
    pub preemption_policy: String,
    pub priority: i64,
    pub restart_policy: String,
    pub scheduler_name: String,
    pub security_context: SecurityContext2,
    pub service_account: Option<String>,
    pub service_account_name: Option<String>,
    pub termination_grace_period_seconds: i64,
    pub tolerations: Vec<Toleration>,
    pub volumes: Vec<Volume>,
    pub affinity: Option<Affinity>,
    pub node_selector: Option<NodeSelector>,
    pub priority_class_name: Option<String>,
    #[serde(default)]
    pub init_containers: Vec<InitContainer>,
    pub host_network: Option<bool>,
    #[serde(rename = "hostIPC")]
    pub host_ipc: Option<bool>,
    #[serde(rename = "hostPID")]
    pub host_pid: Option<bool>,
    pub share_process_namespace: Option<bool>,
    pub automount_service_account_token: Option<bool>,
    #[serde(default)]
    pub topology_spread_constraints: Vec<TopologySpreadConstraint>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Container {
    #[serde(default)]
    pub env: Vec<Env>,
    pub image: String,
    pub image_pull_policy: String,
    pub name: String,
    pub resources: Resources,
    pub security_context: Option<SecurityContext>,
    pub termination_message_path: String,
    pub termination_message_policy: String,
    #[serde(default)]
    pub volume_mounts: Vec<VolumeMount>,
    #[serde(default)]
    pub args: Vec<String>,
    pub liveness_probe: Option<LivenessProbe>,
    #[serde(default)]
    pub ports: Vec<Port>,
    #[serde(default)]
    pub command: Vec<String>,
    pub readiness_probe: Option<ReadinessProbe>,
    pub startup_probe: Option<StartupProbe>,
    pub lifecycle: Option<Lifecycle>,
    pub working_dir: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Env {
    pub name: String,
    pub value: Option<String>,
    pub value_from: Option<ValueFrom>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ValueFrom {
    pub field_ref: Option<FieldRef>,
    pub resource_field_ref: Option<ResourceFieldRef>,
    pub secret_key_ref: Option<SecretKeyRef>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct FieldRef {
    pub api_version: String,
    pub field_path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ResourceFieldRef {
    pub container_name: String,
    pub divisor: String,
    pub resource: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SecretKeyRef {
    pub key: String,
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Resources {
    pub limits: Option<Limits>,
    pub requests: Option<Requests>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Limits {
    pub memory: String,
    pub cpu: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Requests {
    pub cpu: String,
    pub memory: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SecurityContext {
    pub allow_privilege_escalation: Option<bool>,
    pub capabilities: Option<Capabilities>,
    pub run_as_non_root: Option<bool>,
    pub run_as_user: Option<i64>,
    pub privileged: Option<bool>,
    pub read_only_root_filesystem: Option<bool>,
    pub se_linux_options: Option<SeLinuxOptions>,
    pub seccomp_profile: Option<SeccompProfile>,
    pub run_as_group: Option<i64>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Capabilities {
    pub drop: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SeLinuxOptions {
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SeccompProfile {
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct VolumeMount {
    pub mount_path: String,
    pub name: String,
    pub read_only: Option<bool>,
    pub mount_propagation: Option<String>,
    pub sub_path: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LivenessProbe {
    pub failure_threshold: i64,
    pub http_get: Option<HttpGet>,
    pub initial_delay_seconds: Option<i64>,
    pub period_seconds: i64,
    pub success_threshold: i64,
    pub timeout_seconds: i64,
    pub exec: Option<Exec>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HttpGet {
    pub path: String,
    pub port: Value,
    pub scheme: String,
    pub host: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Exec {
    pub command: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Port {
    pub container_port: i64,
    pub protocol: String,
    pub host_port: Option<i64>,
    pub name: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ReadinessProbe {
    pub exec: Option<Exec2>,
    pub failure_threshold: i64,
    pub initial_delay_seconds: Option<i64>,
    pub period_seconds: i64,
    pub success_threshold: i64,
    pub timeout_seconds: i64,
    pub http_get: Option<HttpGet2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Exec2 {
    pub command: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HttpGet2 {
    pub path: String,
    pub port: Value,
    pub scheme: String,
    pub host: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct StartupProbe {
    pub failure_threshold: i64,
    pub http_get: Option<HttpGet3>,
    pub period_seconds: i64,
    pub success_threshold: i64,
    pub timeout_seconds: i64,
    pub exec: Option<Exec3>,
    pub initial_delay_seconds: Option<i64>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HttpGet3 {
    pub path: String,
    pub port: i64,
    pub scheme: String,
    pub host: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Exec3 {
    pub command: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Lifecycle {
    pub pre_stop: PreStop,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PreStop {
    pub exec: Exec4,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Exec4 {
    pub command: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ImagePullSecret {
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SecurityContext2 {
    pub fs_group: Option<i64>,
    pub se_linux_options: Option<SeLinuxOptions2>,
    pub seccomp_profile: Option<SeccompProfile2>,
    pub run_as_non_root: Option<bool>,
    pub run_as_user: Option<i64>,
    pub fs_group_change_policy: Option<String>,
    #[serde(default)]
    pub supplemental_groups: Vec<i64>,
    pub run_as_group: Option<i64>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SeLinuxOptions2 {
    pub level: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SeccompProfile2 {
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Toleration {
    pub effect: Option<String>,
    pub key: Option<String>,
    pub operator: Option<String>,
    pub toleration_seconds: Option<i64>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Volume {
    pub name: String,
    pub secret: Option<Secret>,
    pub projected: Option<Projected>,
    pub host_path: Option<HostPath>,
    pub config_map: Option<ConfigMap2>,
    pub persistent_volume_claim: Option<PersistentVolumeClaim>,
    pub empty_dir: Option<EmptyDir>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Secret {
    pub default_mode: i64,
    pub secret_name: String,
    pub optional: Option<bool>,
    #[serde(default)]
    pub items: Vec<Item2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Item2 {
    pub key: String,
    pub path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Projected {
    pub default_mode: i64,
    pub sources: Vec<Source>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Source {
    pub service_account_token: Option<ServiceAccountToken>,
    pub config_map: Option<ConfigMap>,
    #[serde(rename = "downwardAPI")]
    pub downward_api: Option<DownwardApi>,
    pub secret: Option<Secret2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ServiceAccountToken {
    pub expiration_seconds: i64,
    pub path: String,
    pub audience: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ConfigMap {
    pub items: Vec<Item3>,
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Item3 {
    pub key: String,
    pub path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct DownwardApi {
    pub items: Vec<Item4>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Item4 {
    pub field_ref: FieldRef2,
    pub path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct FieldRef2 {
    pub api_version: String,
    pub field_path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Secret2 {
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HostPath {
    pub path: String,
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ConfigMap2 {
    pub default_mode: i64,
    pub name: String,
    pub optional: Option<bool>,
    #[serde(default)]
    pub items: Vec<Item5>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Item5 {
    pub key: String,
    pub path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PersistentVolumeClaim {
    pub claim_name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct EmptyDir {
    pub medium: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Affinity {
    pub node_affinity: Option<NodeAffinity>,
    pub pod_anti_affinity: Option<PodAntiAffinity>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct NodeAffinity {
    pub required_during_scheduling_ignored_during_execution: RequiredDuringSchedulingIgnoredDuringExecution,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RequiredDuringSchedulingIgnoredDuringExecution {
    pub node_selector_terms: Vec<NodeSelectorTerm>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct NodeSelectorTerm {
    pub match_fields: Vec<MatchField>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchField {
    pub key: String,
    pub operator: String,
    pub values: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PodAntiAffinity {
    #[serde(default)]
    pub required_during_scheduling_ignored_during_execution: Vec<RequiredDuringSchedulingIgnoredDuringExecution2>,
    #[serde(default)]
    pub preferred_during_scheduling_ignored_during_execution: Vec<PreferredDuringSchedulingIgnoredDuringExecution>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RequiredDuringSchedulingIgnoredDuringExecution2 {
    pub label_selector: LabelSelector,
    pub topology_key: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LabelSelector {
    pub match_labels: MatchLabels,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchLabels {
    pub app: String,
    #[serde(rename = "openshift-route-controller-manager-anti-affinity")]
    pub openshift_route_controller_manager_anti_affinity: Option<String>,
    #[serde(rename = "route-controller-manager")]
    pub route_controller_manager: Option<String>,
    pub apiserver: Option<String>,
    #[serde(rename = "oauth-apiserver-anti-affinity")]
    pub oauth_apiserver_anti_affinity: Option<String>,
    #[serde(rename = "controller-manager")]
    pub controller_manager: Option<String>,
    #[serde(rename = "oauth-openshift-anti-affinity")]
    pub oauth_openshift_anti_affinity: Option<String>,
    #[serde(rename = "openshift-apiserver-anti-affinity")]
    pub openshift_apiserver_anti_affinity: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PreferredDuringSchedulingIgnoredDuringExecution {
    pub pod_affinity_term: PodAffinityTerm,
    pub weight: i64,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PodAffinityTerm {
    pub label_selector: LabelSelector2,
    pub topology_key: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LabelSelector2 {
    #[serde(default)]
    pub match_expressions: Vec<MatchExpression>,
    pub match_labels: Option<MatchLabels2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchExpression {
    pub key: String,
    pub operator: String,
    pub values: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchLabels2 {
    pub name: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct NodeSelector {
    #[serde(rename = "node-role.kubernetes.io/master")]
    pub node_role_kubernetes_io_master: Option<String>,
    #[serde(rename = "kubernetes.io/os")]
    pub kubernetes_io_os: Option<String>,
    #[serde(rename = "beta.kubernetes.io/os")]
    pub beta_kubernetes_io_os: Option<String>,
    #[serde(rename = "node-role.kubernetes.io/worker")]
    pub node_role_kubernetes_io_worker: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct InitContainer {
    pub command: Vec<String>,
    pub image: String,
    pub image_pull_policy: String,
    pub name: String,
    pub resources: Resources2,
    pub security_context: Option<SecurityContext3>,
    pub termination_message_path: String,
    pub termination_message_policy: String,
    #[serde(default)]
    pub volume_mounts: Vec<VolumeMount2>,
    #[serde(default)]
    pub args: Vec<String>,
    #[serde(default)]
    pub env: Vec<Env2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Resources2 {
    pub requests: Option<Requests2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Requests2 {
    pub cpu: String,
    pub memory: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SecurityContext3 {
    pub privileged: Option<bool>,
    pub run_as_user: Option<i64>,
    pub allow_privilege_escalation: Option<bool>,
    pub capabilities: Option<Capabilities2>,
    pub run_as_non_root: Option<bool>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Capabilities2 {
    pub drop: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct VolumeMount2 {
    pub mount_path: String,
    pub name: String,
    pub read_only: Option<bool>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Env2 {
    pub name: String,
    pub value: Option<String>,
    pub value_from: Option<ValueFrom2>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ValueFrom2 {
    pub field_ref: FieldRef3,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct FieldRef3 {
    pub api_version: String,
    pub field_path: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TopologySpreadConstraint {
    pub label_selector: LabelSelector3,
    pub max_skew: i64,
    pub topology_key: String,
    pub when_unsatisfiable: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LabelSelector3 {
    #[serde(default)]
    pub match_expressions: Vec<MatchExpression2>,
    pub match_labels: Option<MatchLabels3>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchExpression2 {
    pub key: String,
    pub operator: String,
    pub values: Vec<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchLabels3 {
    #[serde(rename = "docker-registry")]
    pub docker_registry: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Status {
    pub conditions: Vec<Condition>,
    #[serde(default)]
    pub container_statuses: Vec<ContainerStatuse>,
    #[serde(rename = "hostIP")]
    pub host_ip: Option<String>,
    pub phase: String,
    #[serde(rename = "podIP")]
    pub pod_ip: Option<String>,
    #[serde(rename = "podIPs")]
    #[serde(default)]
    pub pod_ips: Vec<PodIp>,
    pub qos_class: String,
    pub start_time: Option<String>,
    #[serde(default)]
    pub init_container_statuses: Vec<InitContainerStatuse>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Condition {
    pub last_probe_time: Value,
    pub last_transition_time: String,
    pub message: Option<String>,
    pub reason: Option<String>,
    pub status: String,
    #[serde(rename = "type")]
    pub type_field: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ContainerStatuse {
    #[serde(rename = "containerID")]
    pub container_id: Option<String>,
    pub image: String,
    #[serde(rename = "imageID")]
    pub image_id: String,
    pub last_state: LastState,
    pub name: String,
    pub ready: bool,
    pub restart_count: i64,
    pub started: bool,
    pub state: State,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LastState {
    pub terminated: Option<Terminated>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Terminated {
    #[serde(rename = "containerID")]
    pub container_id: String,
    pub exit_code: i64,
    pub finished_at: String,
    pub reason: String,
    pub started_at: String,
    pub message: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct State {
    pub running: Option<Running>,
    pub terminated: Option<Terminated2>,
    pub waiting: Option<Waiting>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Running {
    pub started_at: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Terminated2 {
    #[serde(rename = "containerID")]
    pub container_id: String,
    pub exit_code: i64,
    pub finished_at: String,
    pub reason: String,
    pub started_at: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Waiting {
    pub reason: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PodIp {
    pub ip: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct InitContainerStatuse {
    #[serde(rename = "containerID")]
    pub container_id: String,
    pub image: String,
    #[serde(rename = "imageID")]
    pub image_id: String,
    pub last_state: LastState2,
    pub name: String,
    pub ready: bool,
    pub restart_count: i64,
    pub state: State2,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct LastState2 {
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct State2 {
    pub terminated: Terminated3,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Terminated3 {
    #[serde(rename = "containerID")]
    pub container_id: String,
    pub exit_code: i64,
    pub finished_at: String,
    pub reason: String,
    pub started_at: String,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Metadata2 {
    pub resource_version: String,
}
